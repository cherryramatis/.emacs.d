* Setup package manager
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
* General settings
** Remove welcome message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Remove useless UI things
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
#+END_SRC
** Define default directory
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC
** Configure font family
#+BEGIN_SRC emacs-lisp
;; Default font
(set-face-attribute 'default nil :font "Iosevka Term Light" :height 150)

;; Pitched fonts
(set-face-attribute 'fixed-pitch nil :font "Iosevka Term Light" :height 150)

;; Variable pitched fonts
(set-face-attribute 'variable-pitch nil :font "Iosevka Term Light" :height 150)
#+END_SRC
** Highlight matching parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
** Autocomplete matching parens
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(add-hook 'org-mode-hook (lambda () (electric-pair-mode -1)))
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
(linum-mode 1)
#+END_SRC
* Startup performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC
* Keep .emacs.d clean
I don’t want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.
#+BEGIN_SRC emacs-lisp
  ;; Keep transient cruft out of ~/.emacs.d/
  (setq user-emacs-directory "~/.cache/emacs/"
	backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
	url-history-file (expand-file-name "url/history" user-emacs-directory)
	auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
	projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

  ;; Keep customization settings in a temporary file
  (setq custom-file
	(if (boundp 'server-socket-dir)
	    (expand-file-name "custom.el" server-socket-dir)
	  (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+END_SRC
* Keyboard shortcuts
** Kill current buffer
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
* Third party packages
** Which key
which-key is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup. For example, after enabling the minor mode if you enter C-x and
wait for the default of 1 second the minibuffer will expand with all
of the available key bindings that follow C-x (or as many as space
allows given your settings). This includes prefixes like C-x 8 which
are shown in a different face. Screenshots of what the popup will look
like are included below. which-key started as a rewrite of
guide-key-mode, but the feature sets have diverged to a certain
extent.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC
** Modeline
Doom modeline is a cool e minimal modeline for emacs.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 10)
    )
#+end_src
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package modus-vivendi-theme
    :config
    (load-theme 'modus-vivendi t))
  (use-package modus-operandi-theme)
#+END_SRC
** Bufler
Bufler is an excellent package by alphapapa which enables you to automatically
group all of your Emacs buffers into workspaces by defining a series of grouping
rules. Once you have your groups defined (or use the default configuration which
is quite good already), you can use the bufler-workspace-frame-set command to
focus your current Emacs frame on a particular workspace so that
bufler-switch-buffer will only show buffers from that workspace. In my case,
this allows me to dedicate an EXWM workspace to a specific Bufler workspace so
that only see the buffers I care about in that EXWM workspace.
#+BEGIN_SRC emacs-lisp
  (use-package bufler
    :bind (("C-x C-b" . bufler))
    :config
    (setf bufler-groups
	  (bufler-defgroups
	    ;; Subgroup collecting all named workspaces.
	    (group (auto-workspace))
	    ;; Subgroup collecting buffers in a projectile project.
	    (group (auto-projectile))
	    ;; Grouping browser windows
	    (group
	     ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
	     (group-or "Help/Info"
		       (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
		       ;; (mode-match "*Helpful*" (rx bos "helpful-"))
		       (mode-match "*Info*" (rx bos "info-"))))
	    (group
	     ;; Subgroup collecting all special buffers (i.e. ones that are not
	     ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
	     ;; through to other groups, so they end up grouped with their project buffers).
	     (group-and "*Special*"
			(name-match "**Special**"
				    (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
			(lambda (buffer)
			  (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
					       buffer)
				      (funcall (mode-match "Dired" (rx bos "dired"))
					       buffer)
				      (funcall (auto-file) buffer))
			    "*Special*"))))
	    ;; Group remaining buffers by major mode.
	    (auto-mode))))
#+END_SRC
** Diminish
When we diminish a mode, we are saying we want it to continue doing its work for us, but we no longer want to be reminded of it. It becomes a night worker, like a janitor; it becomes an invisible man; it remains a component, perhaps an important one, sometimes an indispensable one, of the mechanism that maintains the day-people’s world, but its place in their thoughts is diminished, usually to nothing. As we grow old we diminish more and more such thoughts, such people, usually to nothing. – Will Mengarini
#+begin_src emacs-lisp
  (use-package diminish)
  (require 'diminish)
  (diminish 'org-roam-mode)
  (diminish 'org-indent-mode)
  (diminish 'company-box-mode)
  (diminish 'buffer-face-mode)
  (diminish 'guru-mode)
  (diminish 'auto-revert-mode)
  (diminish 'flycheck-mode)
  (diminish 'company-mode)
  (diminish 'which-key-mode)
  (diminish 'ivy-mode)
  (diminish 'projectile-mode)
  (diminish 'visual-line-mode)
  (diminish 'undo-tree-mode)
  (diminish 'eldoc-mode)
  (diminish 'yas-minor-mode)
  (diminish 'auto-revert-mode)
#+end_src
** Ivy
I currently use Ivy, Counsel, and Swiper to navigate around files, buffers, and projects super quickly. Here are some workflow notes on how to best use Ivy:

- While in an Ivy minibuffer, you can search within the current results by using S-Space.
- To quickly jump to an item in the minibuffer, use M-s to get Avy line jump keys.
- To see actions for the selected minibuffer item, use M-o and then press the action’s key.
- Super useful: Use C-c C-o to open ivy-occur to open the search results in a separate buffer. From there you can click any item to perform the ivy action.
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :init (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  )
#+END_SRC
Swiper is an alternative to isearch that uses ivy to show an overview of all matches.
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper)))
#+END_SRC
ivy-mode ensures that any Emacs command using completing-read-function uses ivy
for completion. Counsel takes this further, providing versions of common Emacs
commands that are customised to make the best use of ivy. For example,
counsel-find-file has some additional keybindings. Pressing DEL will move you to
the parent directory.
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("C-x b" . counsel-switch-buffer)
         ("C-c k" . counsel-ag))
  :config
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC

Ivy-rich adds a more friendly interface for ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+END_SRC
** Org roam
It’s a database of notes that make you easily implement a second brain with org mode.

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :ensure t
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Dropbox/roam/")
  :config
  :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))
#+END_SRC
** Org tempo
This package help defining some snippets like for expanding source blocks
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+END_SRC
** Lsp
Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.

- Non-blocking asynchronous calls
- Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5)
- Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported).
- Hovers - using lsp-ui
- Code actions - via lsp-execute-code-action, modeline (recommended) or lsp-ui sideline.
- Code outline - using builtin imenu or helm-imenu
- Code navigation - using builtin xref, lsp-treemacs tree views or lsp-ui peek functions.
- Code lens
- Symbol highlights
- Formatting
- Project errors on modeline
- Debugger - dap-mode
- Breadcrumb on headerline
- Helm integration - helm-lsp
- Ivy integration - lsp-ivy
- Treemacs integration - lsp-treemacs
- Semantic highlighting as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)
- which-key integration for better discovery

#+begin_src emacs-lisp
  (defun cherry/lsp-mode-setup ()
    (setq lsp-headerline-breadcumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . cherry/lsp-mode-setup)
           (web-mode . lsp-mode)
           (typescript-mode . lsp-mode))
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    )
#+end_src

This package put some virtual text on emacs indicating linter errors, etc…
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

Integration with ivy because this is amazing.
#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src
** Company
Company is a text completion framework for Emacs. The name stands for “complete anything”. It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
#+begin_src emacs-lisp
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-selection-wrap-around t)
  (company-tng-configure-default)
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+end_src

A company front-end with icons.
#+begin_src emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
** Typescript mode
typescript.el is major-mode for editing Typescript-files in GNU Emacs.

typescript.el is a self-contained, lightweight and minimalist major-mode focused on providing basic font-lock/syntax-highlighting and indentation for Typescript syntax, without any external dependencies.

Output from tsc and tslint is also handled seamlessly through compilation-mode.

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (setq typescript-indent-level 2))
#+end_src
** Web mode
web-mode.el is an autonomous emacs major-mode for editing web templates. HTML documents can embed parts (CSS / JavaScript) and blocks (client / server side).
#+begin_src emacs-lisp
(use-package web-mode
  :mode "\\.tsx\\'"
  :config
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))
#+end_src
** Prettier
prettier-js is a function that formats the current buffer using prettier. The package also exports a minor mode that applies (prettier-js) on save.

#+begin_src emacs-lisp
(use-package prettier-js
  :config
  (add-hook 'web-mode-hook #'prettier-js-mode)
  (add-hook 'typescript-mode-hook #'prettier-js-mode)
  )
#+end_src
** Flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs. For a detailed comparison to Flymake see Flycheck versus Flymake.
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src
** Add node module path
This file provides add-node-modules-path, which searches the current files parent directories for the node_modules/.bin/ directory and adds it to the buffer local exec-path. This allows Emacs to find project based installs of e.g. eslint.
#+begin_src emacs-lisp
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (cond ((eq system-type 'darwin)
     (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
     (setq exec-path (append exec-path '("/usr/local/bin")))))
  (use-package add-node-modules-path
    :init (add-node-modules-path))
#+end_src
** Projectile
Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing mechanism backed by external commands exists as well).

Projectile tries to be practical - portability is great, but if some external tools could speed up some task substantially and the tools are available, Projectile will leverage them.

This library provides easy project management and navigation. The concept of a project is pretty basic - just a folder containing special file. Currently git, mercurial, darcs and bazaar repos are considered projects by default. So are lein, maven, sbt, scons, rebar and bundler projects. If you want to mark a folder manually as a project just create an empty .projectile file in it. Some of Projectile’s features:

- jump to a file in project
- jump to files at point in project
- jump to a directory in project
- jump to a file in a directory
- jump to a project buffer
- jump to a test in project
- toggle between files with same names but different extensions (e.g. .h <-> .c/.cpp, Gemfile <-> Gemfile.lock)
- toggle between code and its test (e.g. main.service.js <-> main.service.spec.js)
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- multi-occur in project buffers
- grep in project
- regenerate project etags or gtags (requires ggtags).
- visit project in dired
- run make in a project with a single key chord
- check for dirty repositories
- toggle read-only mode for the entire project
- support for multiple minibuffer completion/selection libraries (e.g. ido, ivy and helm)

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

Projectile has native support for using ivy as its completion system. Counsel-projectile provides further ivy integration into projectile by taking advantage of ivy’s support for selecting from a list of actions and applying an action without leaving the completion session. Concretely, counsel-projectile defines replacements for existing projectile commands as well as new commands that have no projectile counterparts. A minor mode is also provided that adds key bindings for all these commands on top of the projectile key bindings.
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src
** Magit
Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and every Git command, it is complete enough to allow even experienced Git users to perform almost all of their daily version control tasks directly from within Emacs. While many fine Git clients exist, only Magit and Git itself deserve to be called porcelains.
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit))
#+end_src
** Treesitter
Better syntax highlighting with parseal building. This is an Emacs Lisp binding for tree-sitter, an incremental parsing library. It requires Emacs 25.1 or above, built with dynamic module support.

It aims to be the foundation for a new breed of Emacs packages that understand code structurally. For example:

- Faster, fine-grained code highlighting.
- More flexible code folding.
- Structural editing (like Paredit, or even better) for non-Lisp code.
- More informative indexing for imenu.

The author of tree-sitter articulated its merits a lot better in this Strange Loop talk.
#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)
#+end_src
** Avy
avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same idea.
#+begin_src emacs-lisp
(use-package avy
  :config
  (global-set-key (kbd "M-s") 'avy-goto-char))
#+end_src
** Ace jump
Like easymotion for default emacs.
#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :config
    (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quick move minor mode"
    t)
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
    (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
    (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))
    (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark))
#+end_src
** Guru mode
Guru mode disables (or warns on) some generic keybindings and suggests the use of the established and more efficient Emacs alternatives instead. Here are a few examples:

It will teach you to avoid the arrow keys and use keybindings like C-f, C-b, etc.
It will teach you to avoid keybindings using Home, End, etc.
It will teach you to avoid Delete/Backspace.
#+begin_src emacs-lisp
  (use-package guru-mode
    :config
    (guru-global-mode +1))
#+end_src
** Yasnippet
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet.
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets)
#+end_src
** Workspaces on emacs
You know how many windows managers have workspaces you can switch between? These are variously called “virtual desktops” (e.g. KDE) or “spaces” on OS X, but the idea is the same; you have one workspace with a collection of windows/apps (say for mail and browsing) and another with the windows/apps for a particular project, and you can quickly switch between them. The eyebrowse packages gives a nice simple interface to the same experience in Emacs.
#+begin_src emacs-lisp
  (use-package eyebrowse
    :diminish eyebrowse-mode
    :config (progn
                          (define-key eyebrowse-mode-map (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
              (define-key eyebrowse-mode-map (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
              (define-key eyebrowse-mode-map (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
              (define-key eyebrowse-mode-map (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
              (define-key eyebrowse-mode-map (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
              (define-key eyebrowse-mode-map (kbd "s-6") 'eyebrowse-switch-to-window-config-6)
              (define-key eyebrowse-mode-map (kbd "s-7") 'eyebrowse-switch-to-window-config-7)
              (define-key eyebrowse-mode-map (kbd "s-8") 'eyebrowse-switch-to-window-config-8)
              (define-key eyebrowse-mode-map (kbd "s-9") 'eyebrowse-switch-to-window-config-9)
              (eyebrowse-mode t)
              (setq eyebrowse-new-workspace t)))
#+end_src
** Multiple cursors
Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don't be afraid though, I've been using it since 2011 with great success and much merriment.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src
** Undo tree
Emacs has a powerful undo system. Unlike the standard undo/redo system in
most software, it allows you to recover *any* past state of a buffer
(whereas the standard undo/redo system can lose past states as soon as you
redo). However, this power comes at a price: many people find Emacs' undo
system confusing and difficult to use, spawning a number of packages that
replace it with the less powerful but more intuitive undo/redo system.

Both the loss of data with standard undo/redo, and the confusion of Emacs'
undo, stem from trying to treat undo history as a linear sequence of
changes. It's not. The `undo-tree-mode' provided by this package replaces
Emacs' undo system with a system that treats undo history as what it is: a
branching tree of changes. This simple idea allows the more intuitive
behaviour of the standard undo/redo system to be combined with the power of
never losing any history. An added side bonus is that undo history can in
some cases be stored more efficiently, allowing more changes to accumulate
before Emacs starts discarding history.

The only downside to this more advanced yet simpler undo system is that it
was inspired by Vim. But, after all, most successful religions steal the
best ideas from their competitors!
#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode))
#+end_src
** Paredit
easy way to manipulate lisp
#+begin_src emacs-lisp
  (use-package paredit
    :config
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode))
#+end_src
** Edwina
Dwm like splits whithin emacs
#+begin_src emacs-lisp
  (use-package edwina
    :config
    (setq display-buffer-base-action '(display-buffer-below-selected))
    (edwina-mode 1))
#+end_src
* Mode configuration
** Org mode
*** Text wrap on 80 characters
#+BEGIN_SRC emacs-lisp
(auto-fill-mode)
(setq-default fill-column 80)
#+END_SRC
*** General config
#+BEGIN_SRC emacs-lisp
  (defun cherry/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . cherry/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files '("~/Dropbox/org/todo.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-capture-templates
          '(("t" "Todo" entry (file+olp "~/Dropbox/org/todo.org" "Tasks")
             "* TODO %?\nSCHEDULED: %^t\n" :empty-lines 1)
            ("n" "Note" entry (file+olp "~/Dropbox/org/notes.org" "Inbox")
             "* %?" :empty-lines 1)))

    (define-key global-map (kbd "C-c oc") (lambda () (interactive) (org-capture)))
    (define-key global-map (kbd "C-c oa") (lambda () (interactive) (org-agenda-list)))
    (define-key global-map (kbd "C-c oN") (lambda () (interactive) (find-file "~/Dropbox/org/todo.org")))
    )
#+END_SRC
*** UI changes
    Make headings with cool graphs.
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
     :hook (org-mode . (lambda () (org-bullets-mode 1))))
    #+END_SRC
    Put the text on the center for a more word like experience.
    #+BEGIN_SRC emacs-lisp
      (defun cherry/org-mode-visual-fill ()
	(setq visual-fill-column-width 100
	      visual-fill-column-center-text t)
	(visual-fill-column-mode 1))

      (use-package visual-fill-column
	:hook (org-mode . cherry/org-mode-visual-fill))
    #+END_SRC
*** Org kanban view
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(				; start list
          (" " "Agenda" ((agenda "" ((org-agenda-overriding-header "Today's Schedule:")
                                     (org-agenda-span 'day)
                                     (org-agenda-ndays 1)
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-start-day "+0d")
                                     ;; Remove refiling tasks (https://www.reddit.com/r/orgmode/comments/69acg5/orgagendaskipentryif_but_for_categories/)
                                     (org-agenda-skip-function '(cond ((equal (file-name-nondirectory (buffer-file-name)) "refile.org")
                                                                       (outline-next-heading) (1- (point)))
                                                                      (t (org-agenda-skip-entry-if 'todo 'done))
                                                                      ))
                                     ;; (org-agenda-skip-entry-if 'todo 'done)
                                     (org-agenda-todo-ignore-deadlines nil)))
                         ;; Project tickle list.
                         (todo "PROJECT" ((org-agenda-overriding-header "Project list:")
                                          (org-tags-match-list-sublevels nil)))
                         ;; Refiling category set file wide in file.
                         (tags "REFILING" ((org-agenda-overriding-header "Tasks to Refile:")
                                           (org-tags-match-list-sublevels nil)))
                         ;; Tasks upcoming (should be similar to above?)
                         (agenda "" ((org-agenda-overriding-header "Upcoming:")
                                     (org-agenda-span 7)
                                     (org-agenda-start-day "+1d")
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-skip-function '(cond ((equal (file-name-nondirectory (buffer-file-name)) "refile.org")
                                                                       (outline-next-heading) (1- (point)))
                                                                      (t (org-agenda-skip-entry-if 'todo 'done))
                                                                      ))
                                     ;; I should set this next one to true, so that deadlines are ignored...?
                                     (org-agenda-todo-ignore-deadlines nil)))
                         ;; Tasks that are unscheduled
                         (todo "TODO" ((org-agenda-overriding-header "Unscheduled Tasks:")
                                       (org-tags-match-list-sublevels nil)
                                       ;; (org-agenda-skip-entry-if 'scheduled 'deadline)
                                       (org-agenda-todo-ignore-scheduled 'all)
                                       ))
                         ;; Tasks that are waiting or someday
                         (todo "WAITING|SOMEDAY" ((org-agenda-overriding-header "Waiting/Someday Tasks:")
                                                  (org-tags-match-list-sublevels nil)))
                         )
           )
          )

        ;; If an item has a (near) deadline, and is scheduled, only show the deadline.
        org-agenda-skip-scheduled-if-deadline-is-shown t
        )

  (defun org-agenda-show-kanban (&optional arg)
    (interactive "P")
    (org-agenda arg " "))

  (global-set-key (kbd "C-c a") #'org-agenda-show-kanban)
#+end_src
** Dired
Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files. Dired works with both local and remote directories.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    )

  (use-package dired-single)
  (use-package all-the-icons-dired
    :after (all-the-icons dired)
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    )

  (global-set-key (kbd "C-c d") 'dired-jump)
#+end_src
* Custom functions
** Open eshell on other buffer
#+begin_src emacs-lisp
  (defun open-eshell ()
    "Open eshell"
    (interactive)
    (if (projectile-project-p)
        (projectile-run-eshell)
        (eshell)))

  (defun shell-other-window (buffer-name)
    "Open a `shell' in a new window."
    (interactive)
    (let ((buf (open-eshell)))
      (switch-to-buffer (other-buffer buf))
      (switch-to-buffer-other-window buf)
      (rename-buffer buffer-name)
      ))
#+end_src
** Open named eshell
#+begin_src emacs-lisp
  (defun named-eshell ()
    "Open eshell with buffer name"
    (interactive)
    (shell-other-window (read-string "Enter the shell name: ")))

  (global-set-key (kbd "C-c t") #'named-eshell)
#+end_src
** Delete window when =exit= inside eshell
#+begin_src emacs-lisp
  (require 'eshell)

  (defun eshell-lifecycle () 
    (when (not (one-window-p))
      (delete-window)))

  (advice-add 'eshell-life-is-too-much :after 'eshell-lifecycle)
#+end_src

